colnames( tot_lens ) <- c( 'scaf', 'length' )
tot_lens <- mutate( tot_lens,
scaf = str_replace( scaf, "[|]size[:digit:]*$", "") )
# Get order of scaffolds in the input file
scaf_order <- tibble( scaf = rle( input$scaf )$values ,
num = as.numeric( seq(1:length( unique( input$scaf )))))
# For keeping order in input
input$scaf_num <- scaf_order$num[ match( input$scaf, scaf_order$scaf ) ]
tot_lens <- filter( tot_lens, tot_lens$scaf %in% scaf_order$scaf )
tot_lens <- tot_lens[ match( scaf_order$scaf, tot_lens$scaf ), ]
# Actually shift the positions
input <- tot_lens %>%
# Get cumulative chromosome sizes
mutate( cum_sum = cumsum( length ) - length ) %>%
# Add the matching running total to a new column in gwas
left_join( input, . , by = c("scaf" = "scaf")) %>%
# Add a new column of ps + cumSum + a buffer
mutate( bp_cum = ps + cum_sum + buffer * ( as.name( after ) - 1 ) )
input <- select( input, scaf, ps, stat, chr, bp_cum )
return( input )
}
x <- reorder_scaffolds( x, 'data/test.reorder.txt.gz' )
x <- reorder_scaffolds( x, 'data/test.reordering.txt.gz' )
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
x <- reorder_scaffolds( x, 'data/test.reordering.txt.gz' )
x
tail(x)
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
x <- reorder_by_scaf_len( x, 'data/test.chromSizes.txt.gz' )
x <- reorder_by_scaf_len( x, 'data/test.chromSizes.txt.gz' )
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
x <- reorder_by_scaf_len( x, 'data/test.chromSizes.txt.gz' )
x
tail(x)
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
x <- get_cumulative_positions( input = x, scaffold_lengths = 'data/test.chromSizes.txt.gz',
buffer=10000, after = scaffolds )
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
x <- get_cumulative_positions( input = x, scaffold_lengths = 'data/test.chromSizes.txt.gz',
buffer=10000, after = scaffolds )
x <- get_cumulative_positions( input = x, scaffold_lengths = 'data/test.chromSizes.txt.gz',
buffer=10000, after = 'scaffolds' )
x
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
x <- get_cumulative_positions( input = x, scaffold_lengths = 'data/test.chromSizes.txt.gz',
buffer=10000, after = 'scaffolds' )
x
tail( x )
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
log_y = 'yes', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
log_y = 'yes', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
log_y = 'yes', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
library(ggplot2)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
getwd()
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
plotting_column = 'stat')
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
x
input <- x
output <- 'test.tiff'
plot_fmt <- 'tiff'
type <- 'gwas'
scaffold_lengths <- 'data/test.chromSizes.txt.gz'
plotting_column <- 'stat'
if( type == 'gwas' ){
pvals.adj <- p.adjust( input$stat, method = 'fdr' )
x <- cbind( input$stat, pvals.adj )
x <- x[ order( x[ , 'pvals.adj'], decreasing = T ), ]
p10 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.1, ], n = 1 )[1])
p01 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.01, ], n = 1 )[1])
# Reduce gwas and plot size
# input <- filter( input, stat <= 0.05 )
input$stat <- -log10(input$stat)
ylimits <- c( 0, round(max(input$stat, na.rm = T ) / 5) * 5 )
} else {
p10 <- NA
p01 <- NA
mns <- min( input[,  plotting_column ], na.rm = T )
mxs <- max( input[, plotting_column ], na.rm = T )
ylimits <- c( mns - 0.1 * mns, mxs + 0.1 * mxs )
}
p10
p01
x
input
ylimits
input <- get_cumulative_positions( input, scaffold_lengths = scaffold_lengths,
buffer = 2000000, after = 'chromosomes' )
input
if( plot_fmt == "tiff" ){
tiff( filename = output , width = 7.5 , height = 2 , units = 'in' , res = 300 )
} else if( plot_fmt == "jpeg" ){
jpeg( filename = output , width = 7.5 , height = 2 , units = 'in' , res = 300 )
} else if( plot_fmt == "pdf" ){
pdf( file = output , width = 7.5 , height = 2 , useDingbats = F )
}
par( mar = c(2,2,0.5,0.5), omi = rep(0.1,4) )
# Find tickmarks for x-axis
axisdf <- input %>% group_by( chr ) %>%
dplyr::summarize( center = ( max(bp_cum) + min(bp_cum) ) / 2 )
num_chr <- nrow( axisdf )
num_chr
axisdf
input
dev.off()
ggplot( input, aes( x = bp_cum , y = plotting_column ) ) +
# Show all points
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
input
tail(input)
ggplot( input, aes( x = bp_cum , y = as.name(plotting_column) ) ) +
# Show all points
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
plotting_column
ggplot( input, aes( x = bp_cum , y = plotting_column ) ) +
eom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
dev.off()
ggplot( input, aes( x = bp_cum , y = plotting_column ) ) +
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
input
View(input)
input <- x
if( type == 'gwas' ){
pvals.adj <- p.adjust( input$stat, method = 'fdr' )
x <- cbind( input$stat, pvals.adj )
x <- x[ order( x[ , 'pvals.adj'], decreasing = T ), ]
p10 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.1, ], n = 1 )[1])
p01 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.01, ], n = 1 )[1])
# Reduce gwas and plot size
# input <- filter( input, stat <= 0.05 )
input$stat <- -log10(input$stat)
ylimits <- c( 0, round(max(input$stat, na.rm = T ) / 5) * 5 )
} else {
p10 <- NA
p01 <- NA
mns <- min( input[,  plotting_column ], na.rm = T )
mxs <- max( input[, plotting_column ], na.rm = T )
ylimits <- c( mns - 0.1 * mns, mxs + 0.1 * mxs )
}
stat
x
z <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
input <- z
if( type == 'gwas' ){
pvals.adj <- p.adjust( input$stat, method = 'fdr' )
x <- cbind( input$stat, pvals.adj )
x <- x[ order( x[ , 'pvals.adj'], decreasing = T ), ]
p10 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.1, ], n = 1 )[1])
p01 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.01, ], n = 1 )[1])
# Reduce gwas and plot size
# input <- filter( input, stat <= 0.05 )
input$stat <- -log10(input$stat)
ylimits <- c( 0, round(max(input$stat, na.rm = T ) / 5) * 5 )
} else {
p10 <- NA
p01 <- NA
mns <- min( input[,  plotting_column ], na.rm = T )
mxs <- max( input[, plotting_column ], na.rm = T )
ylimits <- c( mns - 0.1 * mns, mxs + 0.1 * mxs )
}
input <- get_cumulative_positions( input, scaffold_lengths = scaffold_lengths,
buffer = 20000, after = 'chromosomes' )
par( mar = c(2,2,0.5,0.5), omi = rep(0.1,4) )
# Find tickmarks for x-axis
axisdf <- input %>% group_by( chr ) %>%
dplyr::summarize( center = ( max(bp_cum) + min(bp_cum) ) / 2 )
num_chr <- nrow( axisdf )
ggplot( input, aes( x = bp_cum , y = plotting_column ) ) +
# Show all points
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
ylimits
axisdf
ggplot( input, aes( x = bp_cum , y = plotting_column ) )
ggplot( input, aes( x = bp_cum , y = as.name(plotting_column)) )
ggplot( input, aes( x = bp_cum , y = get(plotting_column)) )
input
plotting_column
ggplot( input, aes_string( x = "bp_cum" , y = plotting_column) )
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
ggplot( input, aes_string( x = "bp_cum" , y = plotting_column) ) +
# Show all points
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
plot_genomewide_data( x, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
plot_genomewide_data( z, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
plot_genomewide_data( z, output = 'test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
plot_genomewide_data( z, output = '~/Desktop/test.tiff', plot_fmt = 'tiff',
type = 'gwas', scaffold_lengths = 'data/test.chromSizes.txt.gz',
plotting_column = 'stat')
input <- z
input
if( type == 'gwas' ){
pvals.adj <- p.adjust( input$stat, method = 'fdr' )
x <- cbind( input$stat, pvals.adj )
x <- x[ order( x[ , 'pvals.adj'], decreasing = T ), ]
p10 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.1, ], n = 1 )[1])
p01 <- -log10(head( x[ x[ , 'pvals.adj' ] <= 0.01, ], n = 1 )[1])
# Reduce gwas and plot size
# input <- filter( input, stat <= 0.05 )
input$stat <- -log10(input$stat)
ylimits <- c( 0, round(max(input$stat, na.rm = T ) / 5) * 5 )
} else {
p10 <- NA
p01 <- NA
mns <- min( input[,  plotting_column ], na.rm = T )
mxs <- max( input[, plotting_column ], na.rm = T )
ylimits <- c( mns - 0.1 * mns, mxs + 0.1 * mxs )
}
# Get cumulative positions ---------------------------------------------------
input <- get_cumulative_positions( input, scaffold_lengths = scaffold_lengths,
buffer = 20000, after = 'chromosomes' )
input
if( plot_fmt == "tiff" ){
tiff( filename = output , width = 7.5 , height = 2 , units = 'in' , res = 300 )
} else if( plot_fmt == "jpeg" ){
jpeg( filename = output , width = 7.5 , height = 2 , units = 'in' , res = 300 )
} else if( plot_fmt == "pdf" ){
pdf( file = output , width = 7.5 , height = 2 , useDingbats = F )
}
par( mar = c(2,2,0.5,0.5), omi = rep(0.1,4) )
# Find tickmarks for x-axis
axisdf <- input %>% group_by( chr ) %>%
dplyr::summarize( center = ( max(bp_cum) + min(bp_cum) ) / 2 )
num_chr <- nrow( axisdf )
num_chr
ggplot( input, aes_string( x = "bp_cum" , y = plotting_column) ) +
# Show all points
geom_point( aes( color = factor( input$chr, levels = unique( input$chr )) ),
alpha = 0.75 , size = 1 ) +
scale_color_manual( values = rep(c("grey", "black"), ceiling( num_chr/2 ) ,
length = num_chr )) +
# Significance lines
geom_hline( aes( yintercept = p10 ), color = 'blue', alpha = 0.50,
linetype = 'dashed') +
geom_hline( aes( yintercept = p01 ), color = 'red', alpha = 0.50,
linetype = 'dashed' ) +
# custom X axis:
scale_x_continuous( breaks = axisdf$center, expand = c( 0.005, 0 ),
labels = axisdf$chr,
name = 'Chromosome'  ) +
scale_y_continuous( expand = c( 0.05, 0 ), limits = ylimits ) +
# remove space between plot area and x axis
# Customize the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks = element_blank(),
axis.text = element_text( size = 6 ),
# axis.text.x = element_text( angle = 35 , vjust = 1.25, hjust = 0.95 ),
#axis.text.x = element_blank(),
axis.title = element_text( size = 8 )
)
dev.off()
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
x <- load_gemma_gwas( 'data/test.gemma_gwas.txt.gz', pval = 'p_wald' )
z <- plot_genomewide_data( x, type = 'gwas',
scaffold_lengths = 'data/test.chromSizes.txt.gz', plotting_column = 'stat')
z
source('~/Dropbox/SharedWorking/genomicsPlotting/R/plotting_functions.R', echo=TRUE)
devtools::document()
source('~/Dropbox/SharedWorking/genomicsPlotting/R/reordering_functions.R', echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(genomicsPlotting)
source('~/Dropbox/SharedWorking/genomics_plotting/R/file_loading_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomics_plotting/R/plotting_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomics_plotting/R/reordering_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomics_plotting/R/plotting_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomics_plotting/R/reordering_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/genomics_plotting/R/file_loading_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/gwplotting/R/reordering_functions.R', echo=TRUE)
source('~/Dropbox/SharedWorking/gwplotting/R/file_loading_functions.R', echo=TRUE)
?group_by
?cumsum
?left_join
?aes_string
?map
usethis::use_package("purrr")
source('~/Dropbox/SharedWorking/gwplotting/R/file_loading_functions.R', echo=TRUE)
a1 <- system.file("extdata", "test.gemma_gwas.txt.gz",
package = "gwplotting")
a2 <- system.file("extdata", "test.chromSizes.txt.gz",
package = "gwplotting" )
b <- reorder_by_scaf_len( a1, a2 )
library(gwplotting)
